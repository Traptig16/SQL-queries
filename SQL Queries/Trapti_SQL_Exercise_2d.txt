Aggregate Queries
1. Count of movies acted by actor with actor list in descending order (by count of movies acted).
SELECT a.actor_id, a.first_name,a.last_name,COUNT(*) AS "Movie Count"
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
GROUP BY a.actor_id, a.first_name
ORDER BY "Movie Count" DESC;

2. Which actor has highest "Average movie rating"
SELECT a.actor_id, a.first_name,a.last_name, count(f.rating) AS "Average Rating"
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
GROUP BY a.actor_id, a.first_name
ORDER BY "Average Rating" DESC
LIMIT 1;

3. Count of movies per language
SELECT l.name AS language, COUNT(*) AS movie_count
FROM film f
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name
ORDER BY movie_count DESC;

4. Movie collection by stores 
	4.1 How many movies of same film are stored in each store
SELECT i.store_id, i.film_id, COUNT(*) AS num_movies
FROM inventory i
GROUP BY i.store_id, i.film_id
ORDER BY i.store_id, i.film_id;

	4.2 How many unique movies in each store.
SELECT s.store_id, COUNT(DISTINCT i.film_id) AS unique_movies_count
FROM store s
INNER JOIN inventory i ON s.store_id = i.store_id
GROUP BY s.store_id;

5. Average length of movies.
SELECT AVG(length) AS avg_length FROM film;

6. Which language movies are longest
SELECT language.name, AVG(film.length) AS avg_length
FROM language
JOIN film ON language.language_id = film.language_id
GROUP BY language.name
ORDER BY avg_length DESC
LIMIT 1;

7. Which language movies have highest rating
SELECT language.name, count(rating) as rating 
FROM language
JOIN film ON film.language_id = language.language_id
GROUP BY language.name
ORDER BY rating DESC 
LIMIT 1; 

8. Count of movies by category
SELECT c.name, COUNT(*) as count
FROM film_category fc
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY count DESC;

9. Top 3 actors who worked in horror movies
SELECT a.actor_id, a.first_name, a.last_name, COUNT(*) AS movie_count
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film_category fc ON fa.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
WHERE c.name = 'Horror'
GROUP BY a.actor_id
ORDER BY movie_count DESC
LIMIT 3;

10. Top 3 actors who acted in action or romantic movies.
SELECT actor.actor_id, actor.first_name, actor.last_name, COUNT(DISTINCT film.film_id) AS movie_count
FROM film_actor
JOIN film ON film.film_id = film_actor.film_id
JOIN film_category ON film_category.film_id = film.film_id
JOIN category ON category.category_id = film_category.category_id
JOIN actor ON actor.actor_id = film_actor.actor_id
WHERE category.name = 'Action' OR category.name = 'Romance'
GROUP BY actor.actor_id
ORDER BY movie_count DESC
LIMIT 3;

11. Count of movies rented by Country
SELECT country.country, COUNT(rental.rental_id) AS count
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN store ON inventory.store_id = store.store_id
JOIN address ON store.address_id = address.address_id
JOIN city ON address.city_id = city.city_id
JOIN country ON city.country_id = country.country_id
GROUP BY country.country;

12. Top 3 film renting customers in each city of every country.
SELECT co.country, ci.city, c.customer_id, c.first_name, c.last_name, COUNT(*) AS num_rentals
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id
JOIN customer c ON r.customer_id = c.customer_id
GROUP BY co.country, ci.city, c.customer_id
ORDER BY co.country, ci.city, num_rentals DESC
LIMIT 3 OFFSET 0

13. Number of employees in each store
SELECT store_id, COUNT(*) as num_employees
FROM staff
GROUP BY store_id;

14. Min, Max, average, 90 percentile of rental amount paid by customers in each country.
	Paraphrashing, which country provides more early opportunity.

15. Which employee has rented move movies and what is earning amount per flim.
SELECT 
    staff.first_name, 
    staff.last_name, 
    COUNT(rental.rental_id) AS num_rentals,
    SUM(payment.amount) AS total_earnings,
    AVG(payment.amount) AS avg_earning_per_movie
FROM 
    staff 
    JOIN rental ON staff.staff_id = rental.staff_id 
    JOIN payment ON rental.rental_id = payment.rental_id
GROUP BY 
    staff.staff_id 
ORDER BY 
    num_rentals DESC

